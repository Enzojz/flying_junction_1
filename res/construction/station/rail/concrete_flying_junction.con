local laneutil = require "laneutil"
local paramsutil = require "paramsutil"
local func = require "func"
local coor = require "coor"
local trackEdge = require "trackedge"
local line = require "coorline"
local arc = require "coorarc"
local station = require "stationlib"

local dump = require "datadumper"

local mSidePillar = "station/concrete_flying_junction/infra_junc_pillar_side.mdl"
local mRoofFenceF = "station/concrete_flying_junction/infra_junc_roof_fence_front.mdl"
local mRoofFenceS = "station/concrete_flying_junction/infra_junc_roof_fence_side.mdl"
local mRoof = "station/concrete_flying_junction/infra_junc_roof.mdl"
local bridgeType = "z_concrete_flying_junction.lua"

local listDegree = {5, 10, 20, 30, 40, 50, 60, 70, 80}
local rList = {0.3, 0.5, 0.8, 1, 1.5, 2, 5, 8}

local newModel = function(m, ...)
    return {
        id = m,
        transf = coor.mul(...)
    }
end

function buildCoors(numTracks, groupSize)
    local function builder(xOffsets, uOffsets, baseX, nbTracks)
        local function caller(n)
            return builder(
                func.concat(xOffsets, func.seqMap({1, n}, function(n) return baseX - 0.5 * station.trackWidth + n * station.trackWidth end)),
                func.concat(uOffsets, {baseX + n * station.trackWidth + 0.5}),
                baseX + n * station.trackWidth + 1,
                nbTracks - n)
        end
        if (nbTracks == 0) then
            local offset = function(o) return o - baseX * 0.5 end
            return {tracks = func.map(xOffsets, offset), walls = func.map(uOffsets, offset)}
        elseif (nbTracks < groupSize) then
            return caller(nbTracks)
        else
            return caller(groupSize)
        end
    end
    return builder({}, {0.5}, 1, numTracks)
end

local slopeList = {0, 10, 20, 25, 30, 35, 40, 50, 60}
local heightList = {0.5, 1, 1.5, 2, 4, 6, 8, 10}
local slopeRad = func.mapPair(
    func.concat(slopeList, func.map(slopeList, function(s) return -s end)),
    function(s) return s, math.atan(s * 0.001) end)
local slopeMRotX = func.mapValues(slopeRad, coor.rotX)
local slopeMRotY = func.mapValues(slopeRad, coor.rotY)

local generateLineSegment = function(line)
    local toXyz = function(pt) return coor.xyz(pt.x, pt.y, 0) end
    local sup = toXyz(line.limits.sup)
    local inf = toXyz(line.limits.inf)
    local mid = (sup + inf) * 0.5
    
    local halfLength = sup % inf
    local vector = (sup - inf):normalized() * halfLength
    
    return laneutil.makeLanes({
        {inf:toTuple(), mid:toTuple(), vector:toTuple(), vector:toTuple()},
        {mid:toTuple(), sup:toTuple(), vector:toTuple(), vector:toTuple()},
    })
end

local generateArc = function(arc)
    local toXyz = function(pt) return coor.xyz(pt.x, pt.y, 0) end
    local toVector = function(rad) return coor.xyz(0, -1, 0) .. coor.rotZ(rad) end
    local radSup = arc.limits.sup
    local radInf = arc.limits.inf
    local radMid = (radSup + radInf) * 0.5
    
    local vecSup = toVector(radSup)
    local vecInf = toVector(radInf)
    local vecMid = toVector(radMid)
    local sup = toXyz(arc.arc:pt(radSup))
    local inf = toXyz(arc.arc:pt(radInf))
    local mid = toXyz(arc.arc:pt(radMid))
    
    return laneutil.makeLanes({
        {inf:toTuple(), mid:toTuple(), vecInf:toTuple(), vecMid:toTuple()},
        {mid:toTuple(), sup:toTuple(), vecMid:toTuple(), vecSup:toTuple()},
    })
end

local generateTrackGroups = function(limits, trans)
    trans = trans or {mpt = coor.I(), mvec = coor.I()}
    return func.mapFlatten(limits, function(info) return coor.applyEdges(trans.mpt, trans.mvec)(info.gen(info)) end)
end

function defaultParams(params)
    params.trackType = params.trackType or 0
    params.catenary = params.catenary or 1
    params.nbUpperTracks = params.nbUpperTracks or 1
    params.nbLowerTracks = params.nbLowerTracks or 1
    params.xDegDec = params.xDegDec or 2
    params.xDegUni = params.xDegUni or 0
    params.nbPerGroup = params.nbPerGroup or 1
    params.isMir = params.isMir or 0
    params.slope = params.slope or 0
    params.height = params.height or 0
end

local fLines = function(offsets, rad)
    return func.map(offsets, function(x) return
        line.byVecPt(
            coor.xyz(0, 1, 0) .. coor.rotZ(rad),
            coor.xyz(x, 0, 0) .. coor.rotZ(rad)
    )
    end
)
end

local fArcs = function(offsets, rad, r)
    return func.map(offsets, function(x)
        return arc.byOR(
            coor.xyz(r, 0, 0) .. coor.rotZ(rad),
            r - x
    ) end
)
end

local function params()
    return {
        paramsutil.makeTrackTypeParam(),
        paramsutil.makeTrackCatenaryParam(),
        {
            key = "nbLowerTracks",
            name = _("Number of lower tracks"),
            values = {_("1"), _("2"), _("3"), _("4"), _("5"), _("6"), },
            defaultIndex = 1
        },
        {
            key = "nbUpperTracks",
            name = _("Number of upper tracks"),
            values = {_("1"), _("2"), _("3"), _("4"), _("5"), _("6"), },
            defaultIndex = 1
        },
        {
            key = "xDegDec",
            name = _("Crossing angles"),
            values = {_("5"), _("10"), _("20"), _("30"), _("40"), _("50"), _("60"), _("70"), _("80"), },
            defaultIndex = 2
        },
        {
            key = "xDegUni",
            name = _("+"),
            values = func.seqMap({0, 9}, tostring),
        },
        {
            key = "rLower",
            name = _("R of lower tracks"),
            values = func.concat({"-"}, func.map(rList, tostring))
        },
        {
            key = "rUpper",
            name = _("R of upper tracks"),
            values = func.concat({"-"}, func.map(rList, tostring))
        },
        {
            key = "nbPerGroup",
            name = _("Tracks per group"),
            values = {_("1"), _("2"), _("All")},
            defaultIndex = 1
        },
        {
            key = "isMir",
            name = _("Mirrored"),
            values = {_("No"), _("Yes")},
        },
        {
            key = "slope",
            name = _("Slope(â€°)"),
            values = func.map(slopeList, tostring),
            defaultIndex = 0
        },
        {
            key = "height",
            name = _("Altitude Adjustment(m)"),
            values = func.map(heightList, tostring),
        }
    }

end

function data()
    return {
        type = "RAIL_STATION",
        description = {
            name = _("Concrete Flying Junction"),
            description = _("An European style flying junction")
        },
        availability = {
            yearFrom = 1892
        },
        -- buildMode = "MULTI",
        -- categories = {"tracks"},
        order = 27218,
        -- skipCollision = false,
        -- autoRemovable = false,
        params = params(),
        
        updateFn = function(params)
            defaultParams(params)
            
            local result = {}
            
            local deg = listDegree[params.xDegDec + 1] + params.xDegUni
            local rad = math.rad(deg)
            
            local trackType = ({"standard.lua", "high_speed.lua"})[params.trackType + 1]
            local catenary = params.catenary == 1
            
            local info = {
                lower = {
                    nbTracks = params.nbLowerTracks + 1,
                    r = params.rLower == 0 and 0 or rList[params.rLower] * 1000
                },
                upper = {
                    nbTracks = params.nbUpperTracks + 1,
                    r = params.rUpper == 0 and 0 or rList[params.rUpper] * 1000
                }
            }
            
            local nbPerGroup = ({1, 2, info.lower.nbTracks})[params.nbPerGroup + 1]
            
            local trackBuilder = trackEdge.builder(catenary, trackType)
            local TLowerTracks = trackBuilder.normal(station.noSnap)
            local TUpperTracks = trackBuilder.nonAligned(station.noSnap)
            local TUpperTracksBridge = trackBuilder.bridge(bridgeType, station.noSnap)
            
            local offsets = {
                lower = buildCoors(info.lower.nbTracks, nbPerGroup),
                upper = buildCoors(info.upper.nbTracks, info.upper.nbTracks)
            }

            info.lower.guideliner = (info.lower.r == 0) and fLines or func.bind(fArcs, nil, nil, info.lower.r)
            info.upper.guideliner = (info.upper.r == 0) and fLines or func.bind(fArcs, nil, nil, info.upper.r)

            local guidelines = {
                lower = {
                    tracks = info.lower.guideliner(offsets.lower.tracks, 0),
                    walls = info.lower.guideliner(offsets.lower.walls, 0),
                    level = line.byVecPt(coor.xy(1, 0), coor.o)
                },
                upper = {
                    tracks = info.upper.guideliner(offsets.upper.tracks, rad),
                    walls = info.upper.guideliner(offsets.upper.walls, rad),
                    level = line.byVecPt(coor.xy(math.cos(rad), math.sin(rad)), coor.o)
                }
            }

            if (info.lower.r == 0 and info.upper.r == 0) then
                
                local limitVecs = {
                    lower = {
                        sup = (guidelines.upper.walls[#guidelines.upper.walls] - guidelines.lower.walls[1]) - (guidelines.lower.walls[1] - guidelines.lower.level),
                        inf = (guidelines.upper.walls[1] - guidelines.lower.walls[#guidelines.lower.walls]) - (guidelines.lower.walls[#guidelines.lower.walls] - guidelines.lower.level)
                    },
                    upper = {
                        sup = (guidelines.upper.walls[#guidelines.upper.walls] - guidelines.lower.walls[1]) - (guidelines.upper.walls[#guidelines.upper.walls] - guidelines.upper.level),
                        inf = (guidelines.upper.walls[1] - guidelines.lower.walls[#guidelines.lower.walls]) - (guidelines.upper.walls[1] - guidelines.upper.level)
                    }
                }
                
                local groups = {
                    lower = {
                        tracks = func.map2(guidelines.lower.tracks, offsets.lower.tracks, function(l, x) return
                            {
                                xOffset = x,
                                line = l,
                                limits = {
                                    sup = (l - guidelines.lower.level) + limitVecs.lower.sup,
                                    inf = (l - guidelines.lower.level) + limitVecs.lower.inf
                                },
                                gen = generateLineSegment
                            } end),
                        walls = func.map2(guidelines.lower.walls, offsets.lower.walls, function(l, x) return
                            {
                                xOffset = x,
                                line = l,
                                limits = {
                                    sup = guidelines.upper.walls[#guidelines.upper.walls] - l,
                                    inf = guidelines.upper.walls[1] - l
                                },
                                gen = generateLineSegment
                            } end)
                    },
                    upper = {
                        tracks = func.map2(guidelines.upper.tracks, offsets.upper.tracks, function(l, x) return
                            {
                                xOffset = x,
                                line = l,
                                limits = {
                                    sup = (l - guidelines.upper.level) + limitVecs.upper.sup,
                                    inf = (l - guidelines.upper.level) + limitVecs.upper.inf
                                },
                                gen = generateLineSegment
                            } end),
                        walls = func.map2(guidelines.upper.walls, offsets.upper.walls, function(l, x) return
                            {
                                xOffset = x,
                                line = l,
                                limits = {
                                    sup = l - guidelines.lower.walls[1],
                                    inf = l - guidelines.lower.walls[#guidelines.lower.walls]
                                },
                                gen = generateLineSegment
                            } end)
                    
                    }
                }
                
                local lowerTracks = generateTrackGroups(groups.lower.tracks)
                local upperTracks = generateTrackGroups(groups.upper.tracks, {mpt = coor.transZ(11), mvec = coor.I()})
                
                result.models = {}
                
                result.edgeLists =
                    {
                        TUpperTracks(upperTracks),
                        TLowerTracks(lowerTracks),
                    -- TUpperTracksBridge(func.concat(coor.applyEdges(mRotExt, mRotVec)(upperExt1), coor.applyEdges(mRotExt2, mRotExtVec2)(upperExt1))),
                    }
            elseif (info.lower.r == 0 and info.upper.r > 0) then
                
                local intersectionSelector = function(l, r) if (rad > 0) then return (l.y < r.y) else return (l.y > r.y) end end
                
                local limitVecs = {
                    lower = {
                        sup = func.min(guidelines.upper.walls[#guidelines.upper.walls] / guidelines.lower.walls[1], intersectionSelector) - (guidelines.lower.walls[1] - guidelines.lower.level),
                        inf = func.min(guidelines.upper.walls[1] / guidelines.lower.walls[#guidelines.lower.walls], intersectionSelector) - (guidelines.lower.walls[#guidelines.lower.walls] - guidelines.lower.level)
                    },
                    upper = {
                        sup = guidelines.upper.walls[#guidelines.upper.walls]:rad(func.min(guidelines.upper.walls[#guidelines.upper.walls] / guidelines.lower.walls[1], intersectionSelector)),
                        inf = guidelines.upper.walls[1]:rad(func.min(guidelines.upper.walls[1] / guidelines.lower.walls[#guidelines.lower.walls], intersectionSelector))
                    }
                }
                
                local groups = {
                    lower = {
                        tracks = func.map2(guidelines.lower.tracks, offsets.lower.tracks, function(l, x) return
                            {
                                xOffset = x,
                                line = l,
                                limits = {
                                    sup = (l - guidelines.lower.level) + limitVecs.lower.sup,
                                    inf = (l - guidelines.lower.level) + limitVecs.lower.inf
                                },
                                gen = generateLineSegment
                            } end),
                        walls = func.map2(guidelines.lower.walls, offsets.lower.walls, function(l, x) return
                            {
                                xOffset = x,
                                line = l,
                                limits = {
                                    sup = func.min(guidelines.upper.walls[#guidelines.upper.walls] / l, intersectionSelector),
                                    inf = func.min(guidelines.upper.walls[1] / l, intersectionSelector)
                                },
                                gen = generateLineSegment
                            } end)
                    },
                    upper = {
                        tracks = func.map2(guidelines.upper.tracks, offsets.upper.tracks, function(a, x) return
                            {
                                xOffset = x,
                                arc = a,
                                limits = limitVecs.upper,
                                gen = generateArc
                            } end),
                        walls = func.map2(guidelines.upper.walls, offsets.upper.walls, function(a, x) return
                            {
                                xOffset = x,
                                arc = a,
                                limits = limitVecs.upper,
                                gen = generateArc
                            } end)
                    
                    }
                }
                
                local lowerTracks = generateTrackGroups(groups.lower.tracks)
                local upperTracks = generateTrackGroups(groups.upper.tracks, {mpt = coor.transZ(11), mvec = coor.I()})
                
                result.models = {}
                
                result.edgeLists =
                    {
                        TUpperTracks(upperTracks),
                        TLowerTracks(lowerTracks),
                    -- TUpperTracksBridge(func.concat(coor.applyEdges(mRotExt, mRotVec)(upperExt1), coor.applyEdges(mRotExt2, mRotExtVec2)(upperExt1))),
                    }
            end
            
            
            -- local basePt = {
            --     coor.xyz(-0.5, -0.5, 0),
            --     coor.xyz(0.5, -0.5, 0),
            --     coor.xyz(0.5, 0.5, 0),
            --     coor.xyz(-0.5, 0.5, 0)
            -- }
            -- facesU = func.map(basePt, function(f) return f .. coor.scaleX(nbUpperTracks * 5 + 1) * coor.scaleY(upperTrackLength) * coor.rotZ(rad) end)
            -- facesL = func.map(basePt, function(f) return f .. coor.scaleX(nbLowerTracks * 5.25) * coor.scaleY(lowerTrackLength) end)
            result.terrainAlignmentLists = {{
                type = "EQUAL",
                faces = {
                -- func.map(facesU, coor.vec2Tuple),
                }
            },
            }
            
            -- End of generation
            -- Slope, Height, Mirror treatment
            local slope = slopeList[params.slope + 1]
            local ha = heightList[params.height + 1]
            local isMir = {false, true}
            local mirrored = isMir[params.isMir + 1]
            
            local mz = coor.transZ(ha)
            local mr = slopeMRotX[slope]
            local mf = mirrored and coor.flipX() or coor.I()
            
            local mpt = coor.mul(mf, mr, mz)
            local mvec = coor.mul(mf, mr)
            
            local mapEdgeList = function(edgeList)
                edgeList.edges = func.map(edgeList.edges, coor.applyEdge(mpt, mvec))
                return edgeList
            end
            
            result.edgeLists = func.map(result.edgeLists, mapEdgeList)
            
            local mapModel = function(model)
                model.transf = coor.mul(model.transf, mpt)
                return model
            end
            
            result.models = func.map(result.models, mapModel)
            
            local mapTerrainList = function(ta)
                local mapTerrain = function(t) return (coor.tuple2Vec(t) .. mpt):toTuple() end
                local mapFaces = func.bind(func.map, nil, mapTerrain)
                ta.faces = func.map(ta.faces, mapFaces)
                return ta
            end
            result.terrainAlignmentLists = func.map(result.terrainAlignmentLists, mapTerrainList)
            
            result.terminalGroups = {}
            
            result.cost = 1000
            result.maintenanceCost = 1000 / 6
            
            return result
        end
    }

end
