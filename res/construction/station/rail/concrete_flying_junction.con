local paramsutil = require "paramsutil"
local func = require "flyingjunction/func"
local coor = require "flyingjunction/coor"
local trackEdge = require "flyingjunction/trackedge"
local pipe = require "flyingjunction/pipe"
local junction = require "junction"

local mSidePillar = "station/concrete_flying_junction/infra_junc_pillar_side.mdl"
local mRoofFenceF = "station/concrete_flying_junction/infra_junc_roof_fence_front.mdl"
local mRoofFenceS = "station/concrete_flying_junction/infra_junc_roof_fence_side.mdl"
local mRoof = "station/concrete_flying_junction/infra_junc_roof.mdl"
local bridgeType = "z_concrete_flying_junction.lua"

local listDegree = {5, 10, 20, 30, 40, 50, 60, 70, 80}
local rList = {-0.1, -0.3, -0.5, -1, 1e5, 1, 0.5, 0.3, 0.1}
local rTxtList = {"●", "●", "•", "∙", "0", "∙", "•", "●", "●"}

local slopeList = {0, 10, 20, 25, 30, 35, 40, 50, 60}
local heightList = {-5, -2.5, -0.5, 0, 0.5, 2.5, 5}

local ptXSelector = function(lhs, rhs) return lhs:length() < rhs:length() end

local function attach(limits)
    return function(l, x)
        return {
            limits = limits,
            xOffset = x,
            guideline = l,
        }
    end
end

local function part(rad)
    return function(info, offsets)
        info.lower.r, info.upper.r = junction.minimalR(offsets, info)
        
        local guidelines =
            {
                lower = {
                    tracks = junction.fArcs(offsets.lower.tracks, info.lower.rad, info.lower.r),
                    walls = junction.fArcs(offsets.lower.walls, info.lower.rad, info.lower.r),
                },
                upper = {
                    tracks = junction.fArcs(offsets.upper.tracks, info.upper.rad, info.upper.r),
                    walls = junction.fArcs(offsets.upper.walls, info.upper.rad, info.upper.r),
                }
            }
        
        local limits = {
            lower = {L = guidelines.lower.walls[1], R = guidelines.lower.walls[#guidelines.lower.walls]},
            upper = {L = guidelines.upper.walls[1], R = guidelines.upper.walls[#guidelines.upper.walls]}
        }
        
        local limitRads = {
            lower = {
                inf = limits.lower.R:rad(func.min(limits.lower.R - limits.upper.L, ptXSelector)),
                mid = limits.lower.R:rad(coor.xy(0, 0)),
                sup = limits.lower.L:rad(func.min(limits.lower.L - limits.upper.R, ptXSelector)),
            },
            upper = {
                sup = limits.upper.R:rad(func.min(limits.upper.R - limits.lower.L, ptXSelector)),
                mid = limits.upper.R:rad(coor.xy(0, 0)),
                inf = limits.upper.L:rad(func.min(limits.upper.L - limits.lower.R, ptXSelector)),
            }
        }
        
        return {
            lower = {
                tracks = func.map2(guidelines.lower.tracks, offsets.lower.tracks,
                    attach(limitRads.lower)),
                walls = pipe.new
                * func.map2(guidelines.lower.walls, offsets.lower.walls, function(l, o)
                    return attach(
                        {
                            inf = l:rad(func.min(l - limits.upper.L, ptXSelector)),
                            mid = l:rad(coor.xy(0, 0)),
                            sup = l:rad(func.min(l - limits.upper.R, ptXSelector)),
                        }
                    )(l, o) end)
                * function(walls)
                    for i = 1, #walls - 1 do walls[i].limits.inf = walls[i + 1].limits.inf end
                    for i = #walls, 2, -1 do walls[i].limits.sup = walls[i - 1].limits.sup end
                    return walls
                end
            },
            upper = {
                tracks = func.map2(guidelines.upper.tracks, offsets.upper.tracks,
                    attach(limitRads.upper)),
                walls = {
                    attach({
                        inf = limitRads.upper.inf,
                        mid = limits.upper.L:rad(func.min(limits.upper.L - limits.lower.L, ptXSelector)),
                        sup = limitRads.upper.sup,
                    })(limits.upper.L, offsets.upper.walls[1]),
                    attach({
                        inf = limitRads.upper.inf,
                        mid = limits.upper.R:rad(func.min(limits.upper.R - limits.lower.R, ptXSelector)),
                        sup = limitRads.upper.sup,
                    })(limits.upper.R, offsets.upper.walls[#offsets.upper.walls]),
                },
            }
        }
    end
end



local function defaultParams(params)
    params.trackType = params.trackType or 0
    params.catenary = params.catenary or 1
    params.applyCatenary = params.applyCatenary or 0
    params.nbUpperTracks = params.nbUpperTracks or 1
    params.nbLowerTracks = params.nbLowerTracks or 1
    params.xDegDec = params.xDegDec or 2
    params.xDegUni = params.xDegUni or 0
    params.nbPerGroup = params.nbPerGroup or 1
    params.isMir = params.isMir or 0
    params.slope = params.slope or 0
    params.height = params.height or 0
    params.rLower2 = params.rLower2 or 4
    params.rLower1 = params.rLower1 or 4
    params.rUpper2 = params.rUpper2 or 4
    params.rUpper1 = params.rUpper1 or 4
end

local function params()
    return {
        paramsutil.makeTrackTypeParam(),
        paramsutil.makeTrackCatenaryParam(),
        {
            key = "applyCatenary",
            name = _("Catenary applied for"),
            values = {_("Both"), _("Lower"), _("Upper")},
            defaultIndex = 0
        },
        {
            key = "nbLowerTracks",
            name = _("Number of lower tracks"),
            values = {_("1"), _("2"), _("3"), _("4"), _("5"), _("6"), },
            defaultIndex = 1
        },
        {
            key = "nbUpperTracks",
            name = _("Number of upper tracks"),
            values = {_("1"), _("2"), _("3"), _("4"), _("5"), _("6"), },
            defaultIndex = 1
        },
        {
            key = "xDegDec",
            name = _("Crossing angles"),
            values = {_("5"), _("10"), _("20"), _("30"), _("40"), _("50"), _("60"), _("70"), _("80"), },
            defaultIndex = 2
        },
        {
            key = "xDegUni",
            name = "+",
            values = func.seqMap({0, 9}, tostring),
        },
        {
            key = "rLower2",
            name = _("Curvature of lower tracks : Far"),
            values = rTxtList,
            defaultIndex = 4
        },
        {
            key = "rLower1",
            name = _("Curvature of lower tracks : Near"),
            values = rTxtList,
            defaultIndex = 4
        },
        {
            key = "rUpper2",
            name = _("Curvature of upper tracks : Far"),
            values = rTxtList,
            defaultIndex = 4
        },
        {
            key = "rUpper1",
            name = _("Curvature of upper tracks : Near"),
            values = rTxtList,
            defaultIndex = 4
        },
        {
            key = "nbPerGroup",
            name = _("Tracks per group"),
            values = {_("1"), _("2"), _("All")},
            defaultIndex = 1
        },
        {
            key = "isMir",
            name = _("Mirrored"),
            values = {_("No"), _("Yes")},
        },
        {
            key = "slope",
            name = _("Slope(‰)"),
            values = func.map(slopeList, tostring),
            defaultIndex = 0
        },
        {
            key = "height",
            name = _("Altitude Adjustment(m)"),
            values = func.map(heightList, tostring),
            defaultIndex = 3
        }
    }

end

function data()
    return {
        type = "RAIL_STATION",
        description = {
            name = _("Concrete Flying Junction"),
            description = _("An European style flying junction")
        },
        availability = {
            yearFrom = 1892
        },
        order = 27218,
        params = params(),
        
        updateFn = function(params)
            defaultParams(params)
            
            local deg = listDegree[params.xDegDec + 1] + params.xDegUni
            local rad = math.rad(deg)
            
            local trackType = ({"standard.lua", "high_speed.lua"})[params.trackType + 1]
            local catenary = params.catenary == 1
            local catenaryLower = func.contains({0, 1}, params.applyCatenary) and catenary
            local catenaryUpper = func.contains({0, 2}, params.applyCatenary) and catenary
            local nbPerGroup = ({1, 2, params.nbLowerTracks + 1})[params.nbPerGroup + 1]
            
            local lowerTrackBuilder = trackEdge.builder(catenaryLower, trackType)
            local upperTrackBuilder = trackEdge.builder(catenaryUpper, trackType)
            local TLowerTracks = lowerTrackBuilder.normal()
            local TUpperTracks = upperTrackBuilder.nonAligned()
            local TLowerExtTracks = lowerTrackBuilder.normal()
            local TUpperExtTracks = upperTrackBuilder.bridge(bridgeType)
            
            local retriveR = function(param) return rList[param + 1] * 1000 end
            
            local info1 = {
                lower = {
                    nbTracks = params.nbLowerTracks + 1,
                    r = retriveR(params.rLower1),
                    rad = -0.5 * rad
                },
                upper = {
                    nbTracks = params.nbUpperTracks + 1,
                    r = retriveR(params.rUpper1),
                    rad = 0.5 * rad
                }
            }
            local info2 = {
                lower = {
                    nbTracks = params.nbLowerTracks + 1,
                    r = retriveR(params.rLower2),
                    rad = -0.5 * rad
                },
                upper = {
                    nbTracks = params.nbUpperTracks + 1,
                    r = retriveR(params.rUpper2),
                    rad = 0.5 * rad
                }
            }
            
            local offsets = {
                lower = junction.buildCoors(info1.lower.nbTracks, nbPerGroup),
                upper = junction.buildCoors(info1.upper.nbTracks, info1.upper.nbTracks)
            }
            
            local group1 = part(rad)(info1, offsets)
            local group2 = part(rad)(info2, offsets)
            
            local lowerTracks = junction.generateTrackGroups(group1.lower.tracks, group2.lower.tracks)
            local upperTracks = junction.generateTrackGroups(group1.upper.tracks, group2.upper.tracks, {mpt = coor.transZ(11), mvec = coor.I()})
            
            local upperPolys = pipe.new
                + junction.generatePolyArcEdge(group1.upper.walls[2].guideline, group1.upper.tracks[1].limits.inf, group1.upper.tracks[1].limits.mid)
                + junction.generatePolyArcEdge(group2.upper.walls[2].guideline, group2.upper.tracks[1].limits.mid, group2.upper.tracks[1].limits.sup)
                + junction.generatePolyArcEdge(group2.upper.walls[1].guideline, group2.upper.tracks[1].limits.sup, group2.upper.tracks[1].limits.mid)
                + junction.generatePolyArcEdge(group1.upper.walls[1].guideline, group1.upper.tracks[1].limits.mid, group1.upper.tracks[1].limits.inf)
            
            local lowerPolys = pipe.new
                + junction.generatePolyArcEdge(group1.lower.walls[2].guideline, group1.lower.tracks[1].limits.inf, group1.lower.tracks[1].limits.mid)
                + junction.generatePolyArcEdge(group2.lower.walls[2].guideline, group2.lower.tracks[1].limits.mid, group2.lower.tracks[1].limits.sup)
                + junction.generatePolyArcEdge(group2.lower.walls[1].guideline, group2.lower.tracks[1].limits.sup, group2.lower.tracks[1].limits.mid)
                + junction.generatePolyArcEdge(group1.lower.walls[1].guideline, group1.lower.tracks[1].limits.mid, group1.lower.tracks[1].limits.inf)
            
            result = {
                edgeLists =
                {
                    TUpperTracks(upperTracks.normal),
                    TLowerTracks(lowerTracks.normal),
                    TLowerExtTracks(lowerTracks.ext),
                    TUpperExtTracks(upperTracks.ext),
                },
                models = func.concat(
                    junction.generateStructure(group1.lower, group1.upper)[1],
                    junction.generateStructure(group2.lower, group2.upper)[2]
                ),
                terrainAlignmentLists = {
                    {
                        type = "GREATER",
                        faces = {upperPolys}
                    },
                    {
                        type = "EQUAL",
                        faces = {lowerPolys}
                    }
                }
            }
            
            
            -- End of generation
            -- Slope, Height, Mirror treatment
            local slope = slopeList[params.slope + 1]
            local ha = heightList[params.height + 1]
            local mirrored = params.isMir == 1
            local mz = coor.transZ(ha)
            local mr = coor.rotX(math.atan(slope * 0.001))
            local mf = mirrored and coor.flipX() or coor.I()
            local mpt = mf * mr * mz
            local mvec = mf * mr
            
            local mapEdgeList = function(edgeList)
                return func.with(edgeList, {edges = func.map(edgeList.edges, coor.applyEdge(mpt, mvec))})
            end
            
            local mapModel = function(model) return func.with(model, {transf = model.transf * mpt}) end
            
            local mapTerrainList = function(ta)
                local mapTerrain = function(t) return (coor.tuple2Vec(t) .. mpt):toTuple() end
                local mapFaces = function(faces) return (mirrored and func.rev or func.nop)(func.map(faces, mapTerrain)) end
                return func.with(ta, {faces = func.map(ta.faces, mapFaces)})
            end
            
            return func.with(result,
                {
                    edgeLists = func.map(result.edgeLists, mapEdgeList),
                    models = func.map(result.models, mapModel),
                    terrainAlignmentLists = func.map(result.terrainAlignmentLists, mapTerrainList),
                    groundFaces = {},
                    terminalGroups = {},
                    cost = 1000,
                    maintenanceCost = 1000 / 6
                })
        end
    }

end
